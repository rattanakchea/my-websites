/* ==========================================================================
   Helper classes
   ========================================================================== */

/*
 * Hide visually and from screen readers
 */

.hidden,
[hidden] {
  display: none !important;
}

/*
  * Hide only visually, but have it available for screen readers:
  * https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
  *
  * 1. For long content, line feeds are not interpreted as spaces and small width
  *    causes content to wrap 1 word per line:
  *    https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
  */

.sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
  /* 1 */
}

/*
  * Extends the .sr-only class to allow the element
  * to be focusable when navigated to via the keyboard:
  * https://www.drupal.org/node/897638
  */

.sr-only.focusable:active,
.sr-only.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  white-space: inherit;
  width: auto;
}

/*
  * Hide visually and from screen readers, but maintain layout
  */

.invisible {
  visibility: hidden;
}

/*
  * Clearfix: contain floats
  *
  * The use of `table` rather than `block` is only necessary if using
  * `::before` to contain the top-margins of child elements.
  */

.clearfix::before,
.clearfix::after {
  content: "";
  display: table;
}

.clearfix::after {
  clear: both;
}

// generate text-primary, .text-secondary, ...
// bg-primary, bg-secondary, ...
@each $key, $color in $COLOR_MAP {
  .text-#{$key} {
    color: $color;
  }
  .bg-#{$key} {
    background-color: $color;
  }
}

// helpers class
.box-shadow {
  box-shadow: 1px 1px 2px 0 rgba(0, 0, 0, 0.05);
}

// ------ Flex utility class  --------------

.flex {
  display: flex;

  // main-axis center
  &.jc-sb {
    justify-content: space-between;
  }

  &.jc-c {
    justify-content: center;
  }

  // cross-axis center
  &.ai-c {
    align-items: center;
  }

  &.center {
    justify-content: center;
    align-items: center;
  }
}
